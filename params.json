{"name":"demers.github.io","tagline":"Présentations","body":"**À Noter**: Je suis à la préparation d'une machine virtuelle XUbuntu contenant toute la configuration expliquée ci-bas.\r\n\r\n# Scripting Language for Android (SL4A)\r\n\r\n![SL4A](http://code.google.com/p/android-scripting/logo?cct=1380444037)\r\n\r\nSite officiel: http://code.google.com/p/android-scripting/\r\n\r\n## Quelques informations sur moi\r\n\r\n* Mon nom est F.-Nicola Demers\r\n* Pour me contacter, écrivez-moi au fndemers@gmail.com\r\n* Je suis informaticien.\r\n* Je suis enseignant au Cégep depuis 2000.\r\n* Je travaille au Cégep de Sainte-Foy depuis 2007.\r\n* Je m'intéresse aux logiciels libres et Linux depuis 2000.\r\n* Je m'intéresse à Android (pour mon cours de Cégep) depuis 2012.\r\n\r\n## Pourquoi SL4A?\r\n\r\n* Mes étudiants ne connaissaient pas le langage de base de Android: Java\r\n* Il fallait un langage alternatif\r\n* **Python** est un langage simple, pédagogique, puissant et non-typé.\r\n\r\n## Suppositions pour la suite de ce document\r\n\r\n* Vous avez une installation Linux sur votre ordinateur (sinon, on va faire avec!)\r\n* Vous avez **Python 2.7** d'installé dans votre système (par défaut).\r\n\r\n## Informations générales sur Android\r\n\r\nPrésentation Slideshare: http://fr.slideshare.net/ranjith2011/introduction-to-android-7872075\r\n\r\n## Étapes d'installation\r\n\r\nJ'ai 2 clés USB pour réduire le temps de téléchargement.\r\n\r\n### Étape 1: Installer le SDK de Android\r\n\r\n1. Téléchargez le SDK à http://developer.android.com/sdk/\r\n2. Décompressez le fichier dans le dossier /tmp\r\n3. Rendez-vous dans le dossier créé et déplacez le dossier \"sdk\" dans votre compte utilisateur.\r\n4. Faites de même pour le dossier \"eclipse\" dans votre compte utilisateur.\r\n4. Configurez votre variable $PATH dans votre fichier ~/.bashrc en ajoutant cette ligne\r\n```\r\nexport PATH=~/sdk/platform-tools/:$PATH\r\n```\r\n5. Fermez votre console et ouvrez-en une autre.\r\n6. Tapez la commande pour savoir si le changement a fonctionné:\r\n\r\n```bash\r\nadb devices\r\n```\r\n\r\n### Étape 2: Installer Eclipse et le plugin Android\r\n\r\n* Installez Open Java en cherchant apt://openjdk-7-jdk\r\n* Si vous avez des problèmes, vous pouvez installer SDK de Oracle par les commandes suivantes:\r\n\r\n```\r\n   sudo add-apt-repository ppa:webupd8team/java\r\n   sudo apt-get update\r\n   sudo apt-get install oracle-java7-installer\r\n```\r\n* Précédemment, vous avez installé Eclipse dans votre compte dans le dossier ~/eclipse\r\n* Partez Eclipse par la commande ~/eclipse/eclipse\r\n* Dans le menu _Window/Preference/Android_, vérifiez la présence du chemin d'accès dans le SDK location qui doit être le répertoire vers android-sdk (normalement le chemin **~/sdk**)\r\n* Normalement, dans le menu Window, il devrait y avoir l'option Android SDK Manager.\r\n* Choisissez cette option et cochez Android 4.3 (API 18) et Android 4.0.3 (API 15).\r\n* Vérifiez que pour Android 4.0.3 API 15, vous avez coché les _Sources for Android SDK_. \r\n* L'installation peut prendre du temps.\r\n* Sous Eclipse, allez copier le chemin d'accès dans le menu _Window/Preferences/Android/SDK Location_ Dans le menu _Window/Preferences/Java/Build Path/Classpath_, ajoutez une variable appelé _ANDROID_SDK_ et entrez le chemin d'accès précédent (coller). Ajoutez-y le chemin _/sources/android-15_ pour que ça donne comme suit (ou l'équivalent): \r\n```\r\n~/sdk/sources/android-15/\r\n```\r\n\r\n### Étape 3: Installer le plugin pour programmer en Python.\r\n\r\n1. Partez Eclipse.\r\n2. Dans le menu Help et l'option Install New Software, et le bouton New, tapez l'URL:\r\n```\r\nhttp://pydev.org/updates\r\n```\r\n3. Complétez l'installation du plugin en cochant PyDev.\r\n4. Ouvrir le menu 'Window' et 'Preferences'.\r\n5. Choisir l'option 'PyDev' et 'Interpreter - Python'.\r\n6. Cliquer 'New' pour ajouter un interpréteur Python qui se trouve à /usr/bin/python\r\n7. Si l'étape de la puce (2) ne fonctionne pas, vous pouvez suivre les étapes suivantes.\r\n   1. Téléchargez PyDev à http://sourceforge.net/projects/pydev/files/\r\n   2. Décompressez le fichier ZIP dans le dossier ~/eclipse\r\n   3. Assurez-vous que Eclipse est fermé.\r\n   4. Déplacez le contenu du dossier **plugins** (au départ dans le dossier PyDev) dans le dossier _~/eclipse/plugins_\r\n   5. Déplacez le contenu du dossier **features** (au départ dans le dossier PyDev) dans le dossier _~/eclipse/features_\r\n   6. Partez Eclipse en ligne de commande comme suit: \r\n```\r\n~/eclipse/eclipse -clean\r\n```\r\n   7. Pour en savoir plus, consultez http://pydev.org/manual_101_install.html\r\n\r\n### Étape 4: Démarrez un premier émulateur\r\n\r\n1. Dans le menu Window/Android Virtual Device manager, faites New AVD\r\n2. Choisissez les options voulues.\r\n3. Démarrez l'émulateur.\r\n4. Voir si l'émulateur est bien accessible en tapant\r\n```\r\nadb devices\r\n```\r\n\r\n### Étape 5: Installer 2 applications sur l'émulateur\r\n\r\n* Votre émulateur doit rouler pour installer les applications (évidemment).\r\n* Téléchargez l'application suivante dans votre dossier personnel: http://code.google.com/p/android-scripting/downloads/detail?name=sl4a_r6.apk\r\n* Installez l'application par la commande suivante:\r\n\r\n```\r\nadb install ~/sl4a_r6.apk\r\n```\r\n* Dans l'émulateur, partez l'application en cliquant sur le bouton de l'application.\r\n* Cliquez sur le bouton \"Install Python\".\r\n* Téléchargez l'application suivante: http://code.google.com/p/android-scripting/downloads/detail?name=PythonForAndroid_r4.apk\r\n* Installez l'application par la commande suivante:\r\n\r\n```\r\nadb install ~/PythonForAndroid_r4.apk\r\n```\r\n* Dans l'émulateur, partez l'application en cliquant sur le bouton de l'application.\r\n* Vous devez répondre à la question positivement.\r\n\r\n### Étape 6: Créer un projet de développement Python sous Eclipse\r\n\r\n* Créez un nouveau projet PyDev.  Choisissez l'option de créer un dossier \"src\".\r\n* Par le clique-droit, créez un module PyDev 'Main' appelé **launch_app.py** avec le code suivant: \r\n\r\n```python\r\n#!/usr/bin/env python\r\n \r\n'''\r\n@author: Pro Android Python with SL4A\r\n'''\r\n \r\nimport subprocess\r\n \r\n#ADB = r'C:\\Program Files (x86)\\Android\\android-sdk\\platform-tools\\adb.exe'\r\nADB = '/home/android/android-sdks/platform-tools/adb'\r\nAPPLICATION = 'androidtest.py'\r\nTARGET = '/sdcard/sl4a/scripts/'\r\n \r\ndef main():\r\n    # Upload the application.   \r\n    subprocess.call([ADB, '-e', 'push', APPLICATION, TARGET + APPLICATION])\r\n \r\n    # Launch the application.\r\n    subprocess.call([ADB, '-e', 'shell', 'am', 'start',\r\n          '-a', 'com.googlecode.android_scripting.action.LAUNCH_BACKGROUND_SCRIPT',\r\n          '-n',\r\n           'com.googlecode.android_scripting/.activity.ScriptingLayerServiceLauncher',\r\n          '-e', 'com.googlecode.android_scripting.extra.SCRIPT_PATH',\r\n          TARGET + APPLICATION])\r\n \r\n \r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n* Il faut reconfigurer les variables ADB pour préciser l'endroit du programme adb.\r\n* Il faut aussi reconfigurer les variables APPLICATION pour corriger le nom de votre script Python.\r\n* Créez un module 'Main' avec le code suivant: \r\n\r\n```\r\nimport android\r\ndroid = android.Android()\r\ndroid.makeToast('Hello, Android!')\r\n```\r\n\r\n* Exécutez le script launch_app.py (Run PyDev). \r\n\r\n## Des exemples de code\r\n\r\n### Premier exemple\r\n\r\n```python\r\nimport android\r\ndroid = android.Android()\r\nname = droid.dialogGetInput(\"Hello!\", \"What is your name?\")\r\ndroid.makeToast(\"Hello, %s\" % name.result)\r\n```\r\n\r\n### Deuxième exemple\r\n\r\n```python\r\n\"\"\"Speak the time.\"\"\"\r\n \r\n__author__ = 'T.V. Raman <raman@google.com>'\r\n__copyright__ = 'Copyright (c) 2009, Google Inc.'\r\n__license__ = 'Apache License, Version 2.0'\r\n \r\nimport android\r\nimport time\r\n \r\ndroid = android.Android()\r\ndroid.ttsSpeak(time.strftime(\"%_I %M %p on %A, %B %_e, %Y \"))\r\n```\r\n### Troisième exemple\r\n\r\n```python\r\ntitle = 'User Interface'\r\nmessage = 'Welcome to the SL4A integration test.'\r\ndroid.dialogCreateAlert(title, message)\r\ndroid.dialogSetPositiveButtonText('Continue')\r\ndroid.dialogShow()\r\nresponse = droid.dialogGetResponse().result\r\n```\r\n\r\nD'autres exemples disponibles dans ce fichier ZIP: http://code.google.com/p/android-scripting/downloads/detail?name=python_scripts_r8.zip&can=2\r\n\r\nConsultez surtout les exemples du programme **test.py** pour en savoir plus.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}